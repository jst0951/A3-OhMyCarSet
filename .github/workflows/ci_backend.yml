name: CI(Backend)

on:
  workflow_dispatch:
  push:
    branches: ["main", "dev"]
    paths:
      - "backend/**"

jobs:
  build:
    runs-on: ubuntu-latest

    services: # 같이 동작하는 서비스 컨테이너 목록
      redis: # 빌드시 테스트 진행을 위해 redis 이용
        image: redis
        # redis가 정상 동작중일때 접근하도록 health check 설정
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # localhost의 6379번으로 매핑
          - 6379:6379

    defaults:
      run:
        working-directory: ./backend/ohmycarset

    steps:
      - name: VM으로 파일을 전송합니다.
        uses: actions/checkout@v3

      - name: JDK 11을 설정합니다.
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: corretto

      - name: Gradle을 설정합니다.
        uses: gradle/gradle-build-action@v2

      - name: 빌드를 실행합니다.
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: ./gradlew build

      - name: 빌드 결과물 이름을 app.jar로 바꿉니다.
        run: |
          mv ./build/libs/*.jar ./build/libs/app.jar

      - name: 빌드 결과물을 artifact로 업로드합니다.
        uses: actions/upload-artifact@v3
        with:
          name: build-backend
          path: backend/ohmycarset/build/libs

  deploy:
    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: 빌드 결과물 artifact를 다운로드합니다.
        uses: actions/download-artifact@v3
        with:
          name: build-backend

      - name: SCP로 빌드 파일을 전송합니다.
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "app.jar"
          target: "/home/ubuntu/spring"

      - name: 배포 스크립트를 작동시킵니다.
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          timeout: 5m
          script: |
            sudo /home/ubuntu/spring/update.sh
